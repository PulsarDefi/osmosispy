"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class DowntimeParams(google.protobuf.message.Message):
    """DowntimeParams defines the parameters for downtime."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DURATIONS_FIELD_NUMBER: builtins.int
    @property
    def durations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.protobuf.duration_pb2.Duration]:
        """Durations tracked for downtime. The durations must be sorted from
        shortest to longest and must all be positive.
        """

    def __init__(
        self,
        *,
        durations: collections.abc.Iterable[google.protobuf.duration_pb2.Duration] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations"]) -> None: ...

global___DowntimeParams = DowntimeParams

@typing.final
class SynchronyParams(google.protobuf.message.Message):
    """SynchronyParams defines the parameters for block synchrony."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NEXT_BLOCK_DELAY_FIELD_NUMBER: builtins.int
    @property
    def next_block_delay(self) -> google.protobuf.duration_pb2.Duration:
        """next_block_delay replaces the locally configured timeout_commit in
        CometBFT. It determines the amount of time the CometBFT waits after the
        `CommitTime` (subjective time when +2/3 precommits were received), before
        moving to next height.
        If the application sends next_block_delay = 0 to the consensus engine, the
        latter defaults back to using timeout_commit.
        """

    def __init__(
        self,
        *,
        next_block_delay: google.protobuf.duration_pb2.Duration | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["next_block_delay", b"next_block_delay"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["next_block_delay", b"next_block_delay"]) -> None: ...

global___SynchronyParams = SynchronyParams
