"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Asset(google.protobuf.message.Message):
    """Asset defines a single exchangable asset."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    SYMBOL_FIELD_NUMBER: builtins.int
    DENOM_FIELD_NUMBER: builtins.int
    DENOM_EXPONENT_FIELD_NUMBER: builtins.int
    HAS_MARKET_FIELD_NUMBER: builtins.int
    MARKET_ID_FIELD_NUMBER: builtins.int
    ATOMIC_RESOLUTION_FIELD_NUMBER: builtins.int
    id: builtins.int
    """Unique, sequentially-generated."""
    symbol: builtins.str
    """The human readable symbol of the `Asset` (e.g. `USDC`, `ATOM`).
    Must be uppercase, unique and correspond to the canonical symbol of the
    full coin.
    """
    denom: builtins.str
    """The name of base denomination unit of the `Asset` (e.g. `uatom`,
    'ibc/xxxxx'). Must be unique and match the `denom` used in the `sdk.Coin`
    type in the `x/bank` module.
    """
    denom_exponent: builtins.int
    """The exponent of converting one unit of `denom` to a full coin.
    For example, `name=USDC, denom=uusdc, denom_exponent=-6` defines that
    `1 uusdc = 10^(-6) USDC`. Note that `uusdc` refers to a `Coin` type in
    `x/bank`, where the prefix `u` means `micro` by convetion. `uusdc` is
    a different concept from a "quantum" defined by `atomic_resolution` below.
    To convert from an amount of `denom` to quantums:
    `quantums = denom_amount * 10^(denom_exponent - atomic_resolution)`
    """
    has_market: builtins.bool
    """`true` if this `Asset` has a valid `MarketId` value."""
    market_id: builtins.int
    """The `Id` of the `Market` associated with this `Asset`. It acts as the
    oracle price for the purposes of calculating collateral
    and margin requirements.
    """
    atomic_resolution: builtins.int
    """The exponent for converting an atomic amount (1 'quantum')
    to a full coin. For example, if `atomic_resolution = -8`
    then an `asset_position` with `base_quantums = 1e8` is equivalent to
    a position size of one full coin.
    """
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        symbol: builtins.str = ...,
        denom: builtins.str = ...,
        denom_exponent: builtins.int = ...,
        has_market: builtins.bool = ...,
        market_id: builtins.int = ...,
        atomic_resolution: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["atomic_resolution", b"atomic_resolution", "denom", b"denom", "denom_exponent", b"denom_exponent", "has_market", b"has_market", "id", b"id", "market_id", b"market_id", "symbol", b"symbol"]) -> None: ...

global___Asset = Asset
