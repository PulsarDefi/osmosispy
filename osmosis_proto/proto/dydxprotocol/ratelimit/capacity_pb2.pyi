"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import dydxprotocol.ratelimit.limit_params_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class DenomCapacity(google.protobuf.message.Message):
    """DenomCapacity stores a list of rate limit capacity for a denom."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DENOM_FIELD_NUMBER: builtins.int
    CAPACITY_LIST_FIELD_NUMBER: builtins.int
    denom: builtins.str
    """denom is the denomination of the token being rate limited.
    e.g. ibc/8E27BA2D5493AF5636760E354E46004562C46AB7EC0CC4C1CA14E9E20E2545B5
    """
    @property
    def capacity_list(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bytes]:
        """capacity_list is a list of capacity amount tracked for each `Limiter`
        on the denom. This list has a 1:1 mapping to `limiter` list under
        `LimitParams`.
        """

    def __init__(
        self,
        *,
        denom: builtins.str = ...,
        capacity_list: collections.abc.Iterable[builtins.bytes] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["capacity_list", b"capacity_list", "denom", b"denom"]) -> None: ...

global___DenomCapacity = DenomCapacity

@typing.final
class LimiterCapacity(google.protobuf.message.Message):
    """LimiterCapacity contains a pair of limiter and its corresponding capacity."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LIMITER_FIELD_NUMBER: builtins.int
    CAPACITY_FIELD_NUMBER: builtins.int
    capacity: builtins.bytes
    @property
    def limiter(self) -> dydxprotocol.ratelimit.limit_params_pb2.Limiter: ...
    def __init__(
        self,
        *,
        limiter: dydxprotocol.ratelimit.limit_params_pb2.Limiter | None = ...,
        capacity: builtins.bytes = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["limiter", b"limiter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["capacity", b"capacity", "limiter", b"limiter"]) -> None: ...

global___LimiterCapacity = LimiterCapacity
