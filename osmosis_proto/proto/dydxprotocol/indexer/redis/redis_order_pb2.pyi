"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import dydxprotocol.indexer.protocol.v1.clob_pb2
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class RedisOrder(google.protobuf.message.Message):
    """RedisOrder is a proto for orders stored in Redis. This proto holds some
    human-readable values such as price, size and ticker as well as the original
    `Order` proto from the dYdX application.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _TickerType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TickerTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[RedisOrder._TickerType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        TICKER_TYPE_UNSPECIFIED: RedisOrder._TickerType.ValueType  # 0
        """Default value for the enum. Should never be used in an initialized
        `RedisOrder`.
        """
        TICKER_TYPE_PERPETUAL: RedisOrder._TickerType.ValueType  # 1
        """Ticker is for a perpetual pair."""
        TICKER_TYPE_SPOT: RedisOrder._TickerType.ValueType  # 2
        """Ticker is for a spot pair."""

    class TickerType(_TickerType, metaclass=_TickerTypeEnumTypeWrapper):
        """Enum for the ticker type, PERPETUAL or SPOT."""

    TICKER_TYPE_UNSPECIFIED: RedisOrder.TickerType.ValueType  # 0
    """Default value for the enum. Should never be used in an initialized
    `RedisOrder`.
    """
    TICKER_TYPE_PERPETUAL: RedisOrder.TickerType.ValueType  # 1
    """Ticker is for a perpetual pair."""
    TICKER_TYPE_SPOT: RedisOrder.TickerType.ValueType  # 2
    """Ticker is for a spot pair."""

    ID_FIELD_NUMBER: builtins.int
    ORDER_FIELD_NUMBER: builtins.int
    TICKER_FIELD_NUMBER: builtins.int
    TICKER_TYPE_FIELD_NUMBER: builtins.int
    PRICE_FIELD_NUMBER: builtins.int
    SIZE_FIELD_NUMBER: builtins.int
    id: builtins.str
    """uuid of the Order generated by the Indexer based on the `OrderId`."""
    ticker: builtins.str
    """Ticker for the exchange pair for the order."""
    ticker_type: global___RedisOrder.TickerType.ValueType
    """Type of the ticker, PERPETUAL or SPOT."""
    price: builtins.str
    """Human-readable price of the order."""
    size: builtins.str
    """Human-readable size of the order."""
    @property
    def order(self) -> dydxprotocol.indexer.protocol.v1.clob_pb2.IndexerOrder:
        """Order proto from the protocol."""

    def __init__(
        self,
        *,
        id: builtins.str = ...,
        order: dydxprotocol.indexer.protocol.v1.clob_pb2.IndexerOrder | None = ...,
        ticker: builtins.str = ...,
        ticker_type: global___RedisOrder.TickerType.ValueType = ...,
        price: builtins.str = ...,
        size: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["order", b"order"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "order", b"order", "price", b"price", "size", b"size", "ticker", b"ticker", "ticker_type", b"ticker_type"]) -> None: ...

global___RedisOrder = RedisOrder
