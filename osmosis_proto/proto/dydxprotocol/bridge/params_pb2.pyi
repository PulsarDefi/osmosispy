"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class EventParams(google.protobuf.message.Message):
    """EventParams stores parameters about which events to recognize and which
    tokens to mint.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DENOM_FIELD_NUMBER: builtins.int
    ETH_CHAIN_ID_FIELD_NUMBER: builtins.int
    ETH_ADDRESS_FIELD_NUMBER: builtins.int
    denom: builtins.str
    """The denom of the token to mint."""
    eth_chain_id: builtins.int
    """The numerical chain ID of the Ethereum chain to query."""
    eth_address: builtins.str
    """The address of the Ethereum contract to monitor for logs."""
    def __init__(
        self,
        *,
        denom: builtins.str = ...,
        eth_chain_id: builtins.int = ...,
        eth_address: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["denom", b"denom", "eth_address", b"eth_address", "eth_chain_id", b"eth_chain_id"]) -> None: ...

global___EventParams = EventParams

@typing.final
class ProposeParams(google.protobuf.message.Message):
    """ProposeParams stores parameters for proposing to the module."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MAX_BRIDGES_PER_BLOCK_FIELD_NUMBER: builtins.int
    PROPOSE_DELAY_DURATION_FIELD_NUMBER: builtins.int
    SKIP_RATE_PPM_FIELD_NUMBER: builtins.int
    SKIP_IF_BLOCK_DELAYED_BY_DURATION_FIELD_NUMBER: builtins.int
    max_bridges_per_block: builtins.int
    """The maximum number of bridge events to propose per block.
    Limits the number of events to propose in a single block
    in-order to smooth out the flow of events.
    """
    skip_rate_ppm: builtins.int
    """Do not propose any events if a [0, 1_000_000) random number generator
    generates a number smaller than this number.
    Setting this parameter to 1_000_000 means always skipping proposing events.
    """
    @property
    def propose_delay_duration(self) -> google.protobuf.duration_pb2.Duration:
        """The minimum duration to wait between a finalized bridge and
        proposing it. This allows other validators to have enough time to
        also recognize its occurence. Therefore the bridge daemon should
        pool for new finalized events at least as often as this parameter.
        """

    @property
    def skip_if_block_delayed_by_duration(self) -> google.protobuf.duration_pb2.Duration:
        """Do not propose any events if the timestamp of the proposal block is
        behind the proposers' wall-clock by at least this duration.
        """

    def __init__(
        self,
        *,
        max_bridges_per_block: builtins.int = ...,
        propose_delay_duration: google.protobuf.duration_pb2.Duration | None = ...,
        skip_rate_ppm: builtins.int = ...,
        skip_if_block_delayed_by_duration: google.protobuf.duration_pb2.Duration | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["propose_delay_duration", b"propose_delay_duration", "skip_if_block_delayed_by_duration", b"skip_if_block_delayed_by_duration"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["max_bridges_per_block", b"max_bridges_per_block", "propose_delay_duration", b"propose_delay_duration", "skip_if_block_delayed_by_duration", b"skip_if_block_delayed_by_duration", "skip_rate_ppm", b"skip_rate_ppm"]) -> None: ...

global___ProposeParams = ProposeParams

@typing.final
class SafetyParams(google.protobuf.message.Message):
    """SafetyParams stores safety parameters for the module."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IS_DISABLED_FIELD_NUMBER: builtins.int
    DELAY_BLOCKS_FIELD_NUMBER: builtins.int
    is_disabled: builtins.bool
    """True if bridging is disabled."""
    delay_blocks: builtins.int
    """The number of blocks that bridges accepted in-consensus will be pending
    until the minted tokens are granted.
    """
    def __init__(
        self,
        *,
        is_disabled: builtins.bool = ...,
        delay_blocks: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["delay_blocks", b"delay_blocks", "is_disabled", b"is_disabled"]) -> None: ...

global___SafetyParams = SafetyParams
