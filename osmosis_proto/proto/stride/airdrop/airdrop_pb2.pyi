"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ClaimType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ClaimTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ClaimType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    CLAIM_DAILY: _ClaimType.ValueType  # 0
    """CLAIM_DAILY indicates that the airdrop rewards are accumulated daily
    A user can claim daily up front and change their decision within the
    deadline window
    This type is assigned to the user by default when their allocations are
    added
    """
    CLAIM_EARLY: _ClaimType.ValueType  # 1
    """CLAIM_EARLY indicates that the airdrop rewards have been claimed early,
    with half going to the user and half being clawed back
    """

class ClaimType(_ClaimType, metaclass=_ClaimTypeEnumTypeWrapper):
    """ClaimType enum represents the possible claim types for a user getting an
    airdrop
    """

CLAIM_DAILY: ClaimType.ValueType  # 0
"""CLAIM_DAILY indicates that the airdrop rewards are accumulated daily
A user can claim daily up front and change their decision within the
deadline window
This type is assigned to the user by default when their allocations are
added
"""
CLAIM_EARLY: ClaimType.ValueType  # 1
"""CLAIM_EARLY indicates that the airdrop rewards have been claimed early,
with half going to the user and half being clawed back
"""
global___ClaimType = ClaimType

@typing.final
class Params(google.protobuf.message.Message):
    """Airdrop module parameters"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PERIOD_LENGTH_SECONDS_FIELD_NUMBER: builtins.int
    period_length_seconds: builtins.int
    """The number of seconds between each element in the allocations array
    In practice this is always 24 hours, but it's customizable for testing
    """
    def __init__(
        self,
        *,
        period_length_seconds: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["period_length_seconds", b"period_length_seconds"]) -> None: ...

global___Params = Params

@typing.final
class UserAllocation(google.protobuf.message.Message):
    """UserAllocation tracks the status of an allocation for a user on a specific
    airdrop
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AIRDROP_ID_FIELD_NUMBER: builtins.int
    ADDRESS_FIELD_NUMBER: builtins.int
    CLAIMED_FIELD_NUMBER: builtins.int
    FORFEITED_FIELD_NUMBER: builtins.int
    ALLOCATIONS_FIELD_NUMBER: builtins.int
    airdrop_id: builtins.str
    """ID of the airdrop"""
    address: builtins.str
    """Address of the account that is receiving the airdrop allocation
    The address does not have to be a stride address - but non-stride addresses
    must be linked and merged into a stride address before claiming
    """
    claimed: builtins.str
    """The total amount of tokens that have already been claimed"""
    forfeited: builtins.str
    """The total amount of tokens that have been forfeited by the user for
    claiming early
    """
    @property
    def allocations(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The current state of allocations for this airdrop

        Ex 1:
          Day 0: {claimed:0, allocations:[10,10,10]}
          *MsgClaim*
          Day 1: {claimed:10, allocations:[0,10,10]}
          *MsgClaim*
          Day 2: {claimed:20, allocations:[0,0,10]}

        Ex 2:
          Day 0: {claimed:0, allocations:[10,10,10]}
          *MsgClaimEarly*
          Day 1: {claimed:15, forfeited:15, allocations:[0,0,0]}
        """

    def __init__(
        self,
        *,
        airdrop_id: builtins.str = ...,
        address: builtins.str = ...,
        claimed: builtins.str = ...,
        forfeited: builtins.str = ...,
        allocations: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["address", b"address", "airdrop_id", b"airdrop_id", "allocations", b"allocations", "claimed", b"claimed", "forfeited", b"forfeited"]) -> None: ...

global___UserAllocation = UserAllocation

@typing.final
class Airdrop(google.protobuf.message.Message):
    """Airdrop track the aggregate unbondings across an epoch"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    REWARD_DENOM_FIELD_NUMBER: builtins.int
    DISTRIBUTION_START_DATE_FIELD_NUMBER: builtins.int
    DISTRIBUTION_END_DATE_FIELD_NUMBER: builtins.int
    CLAWBACK_DATE_FIELD_NUMBER: builtins.int
    CLAIM_TYPE_DEADLINE_DATE_FIELD_NUMBER: builtins.int
    EARLY_CLAIM_PENALTY_FIELD_NUMBER: builtins.int
    DISTRIBUTOR_ADDRESS_FIELD_NUMBER: builtins.int
    ALLOCATOR_ADDRESS_FIELD_NUMBER: builtins.int
    LINKER_ADDRESS_FIELD_NUMBER: builtins.int
    id: builtins.str
    """Airdrop ID"""
    reward_denom: builtins.str
    """Denom used when distributing rewards"""
    early_claim_penalty: builtins.str
    """Penalty for claiming rewards early - e.g. 0.5 means claiming early will
    result in losing 50% of rewards
    """
    distributor_address: builtins.str
    """Account that holds the total reward balance and distributes to users"""
    allocator_address: builtins.str
    """Admin account with permissions to add or update allocations"""
    linker_address: builtins.str
    """Admin account with permissions to link addresseses"""
    @property
    def distribution_start_date(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The first date that claiming begins and rewards are distributed"""

    @property
    def distribution_end_date(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The last date for rewards to be distributed. Immediately after this date
        the rewards can no longer be claimed, but rewards have not been clawed back
        yet
        """

    @property
    def clawback_date(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Date with which the rewards are clawed back (occurs after the distribution
        end date)
        """

    @property
    def claim_type_deadline_date(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Deadline for the user to make a decision on their claim type"""

    def __init__(
        self,
        *,
        id: builtins.str = ...,
        reward_denom: builtins.str = ...,
        distribution_start_date: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        distribution_end_date: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        clawback_date: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        claim_type_deadline_date: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        early_claim_penalty: builtins.str = ...,
        distributor_address: builtins.str = ...,
        allocator_address: builtins.str = ...,
        linker_address: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["claim_type_deadline_date", b"claim_type_deadline_date", "clawback_date", b"clawback_date", "distribution_end_date", b"distribution_end_date", "distribution_start_date", b"distribution_start_date"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["allocator_address", b"allocator_address", "claim_type_deadline_date", b"claim_type_deadline_date", "clawback_date", b"clawback_date", "distribution_end_date", b"distribution_end_date", "distribution_start_date", b"distribution_start_date", "distributor_address", b"distributor_address", "early_claim_penalty", b"early_claim_penalty", "id", b"id", "linker_address", b"linker_address", "reward_denom", b"reward_denom"]) -> None: ...

global___Airdrop = Airdrop
