"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Minter(google.protobuf.message.Message):
    """Minter represents the minting state."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EPOCH_PROVISIONS_FIELD_NUMBER: builtins.int
    epoch_provisions: builtins.str
    """current epoch provisions"""
    def __init__(
        self,
        *,
        epoch_provisions: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["epoch_provisions", b"epoch_provisions"]) -> None: ...

global___Minter = Minter

@typing.final
class DistributionProportions(google.protobuf.message.Message):
    """next id: 5"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STAKING_FIELD_NUMBER: builtins.int
    COMMUNITY_POOL_GROWTH_FIELD_NUMBER: builtins.int
    COMMUNITY_POOL_SECURITY_BUDGET_FIELD_NUMBER: builtins.int
    STRATEGIC_RESERVE_FIELD_NUMBER: builtins.int
    staking: builtins.str
    """staking defines the proportion of the minted minted_denom that is to be
    allocated as staking rewards.
    """
    community_pool_growth: builtins.str
    """community_pool defines the proportion of the minted mint_denom that is
    to be allocated to the community pool: growth.
    """
    community_pool_security_budget: builtins.str
    """community_pool defines the proportion of the minted mint_denom that is
    to be allocated to the community pool: security budget.
    """
    strategic_reserve: builtins.str
    """strategic_reserve defines the proportion of the minted mint_denom that is
    to be allocated to the pool: strategic reserve.
    """
    def __init__(
        self,
        *,
        staking: builtins.str = ...,
        community_pool_growth: builtins.str = ...,
        community_pool_security_budget: builtins.str = ...,
        strategic_reserve: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["community_pool_growth", b"community_pool_growth", "community_pool_security_budget", b"community_pool_security_budget", "staking", b"staking", "strategic_reserve", b"strategic_reserve"]) -> None: ...

global___DistributionProportions = DistributionProportions

@typing.final
class Params(google.protobuf.message.Message):
    """Params holds parameters for the mint module."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MINT_DENOM_FIELD_NUMBER: builtins.int
    GENESIS_EPOCH_PROVISIONS_FIELD_NUMBER: builtins.int
    EPOCH_IDENTIFIER_FIELD_NUMBER: builtins.int
    REDUCTION_PERIOD_IN_EPOCHS_FIELD_NUMBER: builtins.int
    REDUCTION_FACTOR_FIELD_NUMBER: builtins.int
    DISTRIBUTION_PROPORTIONS_FIELD_NUMBER: builtins.int
    MINTING_REWARDS_DISTRIBUTION_START_EPOCH_FIELD_NUMBER: builtins.int
    mint_denom: builtins.str
    """type of coin to mint"""
    genesis_epoch_provisions: builtins.str
    """epoch provisions from the first epoch"""
    epoch_identifier: builtins.str
    """mint epoch identifier"""
    reduction_period_in_epochs: builtins.int
    """number of epochs take to reduce rewards"""
    reduction_factor: builtins.str
    """reduction multiplier to execute on each period"""
    minting_rewards_distribution_start_epoch: builtins.int
    """start epoch to distribute minting rewards"""
    @property
    def distribution_proportions(self) -> global___DistributionProportions:
        """distribution_proportions defines the proportion of the minted denom"""

    def __init__(
        self,
        *,
        mint_denom: builtins.str = ...,
        genesis_epoch_provisions: builtins.str = ...,
        epoch_identifier: builtins.str = ...,
        reduction_period_in_epochs: builtins.int = ...,
        reduction_factor: builtins.str = ...,
        distribution_proportions: global___DistributionProportions | None = ...,
        minting_rewards_distribution_start_epoch: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["distribution_proportions", b"distribution_proportions"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["distribution_proportions", b"distribution_proportions", "epoch_identifier", b"epoch_identifier", "genesis_epoch_provisions", b"genesis_epoch_provisions", "mint_denom", b"mint_denom", "minting_rewards_distribution_start_epoch", b"minting_rewards_distribution_start_epoch", "reduction_factor", b"reduction_factor", "reduction_period_in_epochs", b"reduction_period_in_epochs"]) -> None: ...

global___Params = Params
